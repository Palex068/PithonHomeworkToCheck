from os import path
from os import system

file_base = "base.txt"
all_data = []
id = 0

if not path.exists(file_base): # –µ—Å–ª–∏ —Ñ–∞–π–ª–∞ —Å –±–∞–∑–æ–π –Ω–µ—Ç, —Å–æ–∑–¥–∞–¥–∏–º –µ–≥–æ
    with open(file_base, "w", encoding="utf-8") as f:
        f.write('0 –§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ –¢–µ–ª–µ—Ñ–æ–Ω\n')


def read_records(): # –∫–æ–ø–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é all_data
    global all_data, id

    with open(file_base, "r", encoding="utf-8") as f:
        all_data = [i.strip() for i in f]
        if all_data:
            id = int(all_data[-1][0])
        return all_data


def show_all(): # –ø–µ—á–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–≥–æ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞
    if not all_data:
        print("Empty data")
    else:
        matrix_data = list(string.split() for string in all_data)
        for i in matrix_data:
            print(f"""{i[0]:4}{i[1]:15}{i[2]:15}{i[3]:15}{i[4]:12}""")
                

def add_new_contact(): # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
    
    global id
    data_content = ['–§–∞–º–∏–ª–∏—é','–ò–º—è','–û—Ç—á–µ—Å—Ç–≤–æ','–¢–µ–ª–µ—Ñ–æ–Ω']
    answers = []
    
    for data in data_content:
        answers.append(input_data(data))
    
    if not exist_contact(0, " ".join(answers)):
        id += 1
        answers.insert(0, str(id))

        with open(file_base, 'a', encoding="utf-8") as f:
            f.write(f'{" ".join(answers)}\n')
        print("–î–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω—ã!\n")
    else:
        print("–¢–∞–∫–∞—è –∑–∞–ø–∏—Å—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")


def input_data(num):  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    
    answer = input(f"–í–≤–µ–¥–∏—Ç–µ {num}: ")
    while True:
        if num in "–§–∞–º–∏–ª–∏—è –§–∞–º–∏–ª–∏—é –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ":
            if answer.isalpha():
                break  #TODO: –¥–æ–±–∞–≤–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å
        if num in "–¢–µ–ª–µ—Ñ–æ–Ω":
            if answer.isdigit() and len(answer) == 11:
                break
        answer = input(f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö!\n"
                       f"–î–ª—è –§–ò–û –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã!"
                       f"–î–ª—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ü–∏—Ñ—Ä—ã!"
                       f"–î–ª–∏–Ω–Ω–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ 11 —Ü–∏—Ñ—Ä!\n"
                       f"–í–≤–µ–¥–∏—Ç–µ {num}: ")
    return answer


def exist_contact(rec_id, data):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ

    :type data: –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–∏—Å–∏
    :type rec_id: –ø—Ä–æ–≤–µ—Ä–∫–∞ id
    """

    if rec_id:
        candidates = [i for i in all_data if rec_id in i[0]]
    else:
        candidates = [i for i in all_data if data in i]
    return candidates


def search_contact():
    search_data = exist_contact(0, input("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞: "))
    
    if search_data:
        matrix_data = list(string.split() for string in search_data)
        for i in matrix_data:
            print(f"""{i[0]:4}{i[1]:15}{i[2]:15}{i[3]:15}{i[4]:12}""")
        
    else:
        print("–¢–∞–∫–æ–π –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç!")


def change_contact(data_tuple):  #–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å–∏

    global all_data
    symbol = "\n"

    record_id, num_data, data = data_tuple

    for i, v in enumerate(all_data):
        if v[0] == record_id:
            v = v.split()
            v[int(num_data)] = data
            if exist_contact(0, " ".join(v[1:])):
                print("–¢–∞–∫–∞—è –∑–∞–ø–∏—Å—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
                return
            all_data[i] = " ".join(v)
            break

    with open(file_base, 'w', encoding="utf-8") as f:
        f.write(f'{symbol.join(all_data)}\n')
    print("–ó–∞–ø–∏—Å—å –∏–∑–º–µ–Ω–µ–Ω–∞!\n")


def del_contact(): # –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏

    global all_data

    symbol = "\n"
    show_all()
    
    del_record = input("–í–≤–µ–¥–∏—Ç–µ id –∑–∞–ø–∏—Å–∏: ")

    if exist_contact(del_record, ""):
        all_data = [k for k in all_data if k[0] != del_record]

        with open(file_base, 'w', encoding="utf-8") as f:
            f.write(f'{symbol.join(all_data)}\n')
        print("–ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞!\n")
    else:
        print("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö!")


def interface():
    play = True
    while play:
        read_records()
        answer = input("""
* * * * * * * * * * * * * * *        
*   –¢–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫:  *
* * * * * * * * * * * * * * *
*  1. –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏   *
*  2. –î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç      *
*  3. –ù–∞–π—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç         *
*  4. –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å—å  *
*  5. –£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç       *
*  0. –í—ã—Ö–æ–¥                 *
* * * * * * * * * * * * * * *
""")             
        match answer:
            case "1":
                show_all()
            case "2":
                add_new_contact()
            case "3":
                search_contact()
            case "4":
                work = edit_menu()
                if work:
                    change_contact(work)
            case "5":
                del_contact()
            case "6":
                pass
            case "0":
                play = False
            case _:
                print("Try again!\n")
    else:
        system('cls')
        print("I'll be back! üòé ")


def edit_menu():  #–ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

    add_dict = {"1": "–§–∞–º–∏–ª–∏—è", "2": "–ò–º—è", "3": "–û—Ç—á–µ—Å—Ç–≤–æ", "4": "–¢–µ–ª–µ—Ñ–æ–Ω"}

    show_all()
    record_id = input("–í–≤–µ–¥–∏—Ç–µ id –∑–∞–ø–∏—Å–∏: ")

    if exist_contact(record_id, ""):
        while True:
            print("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–º–µ–Ω—ã:")
            change = input("1. –§–∞–º–∏–ª–∏—è\n"
                           "2. –ò–º—è\n"
                           "3. –û—Ç—á–µ—Å—Ç–≤–æ\n"
                           "4. –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n"
                           "5. –í—ã—Ö–æ–¥\n")

            match change:
                case "1" | "2" | "3" | "4":
                    return record_id, change, input_data(add_dict[change])
                case "5":
                    return 0
                case _:
                    print("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.")
    else:
        print("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö!")

interface()